'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n  scalar Upload\n\n  type RestaurantMenu {\n    id: ID!\n    name: String!\n    description: String\n    price: Int!\n    image: String!\n    categories: [Category!]!\n  }\n\n  type Restaurant {\n    id: ID!\n    name: String!\n    description: String!\n    opening_time: String!\n    closing_time: String!\n    is_24_hours: String!\n    phone_number: String!\n    total_tables: String!\n    menus: [RestaurantMenu!]!\n    picture: String\n    slug: String!\n  }\n\n  type RestaurantAdmin {\n    id: ID!\n    email: String!\n    restaurant: Restaurant!\n    nin: String!\n    address: String!\n    phone_number: String!\n  }\n\n  type Customer {\n    id: ID!\n    email: String!\n    name: String!\n    profile_picture: String\n  }\n\n  type OrderItem {\n    id: ID!\n    restaurant_menu: RestaurantMenu!\n    quantity: Int!\n    notes: String\n  }\n\n  type Order {\n    id: ID!\n    total_price: Int!\n    table_number: Int\n    restaurant: Restaurant!\n    customer: Customer!\n    order_items: [OrderItem!]!\n    paid: Boolean!\n    order_number: String!\n  }\n\n  type Category {\n    id: Int!\n    name: String!\n  }\n\n  input OrderItemInput {\n    menu_id: ID!\n    quantity: Int!\n    note: String!\n  }\n\n  input OrderInput {\n    id: ID!\n    table_number: Int!\n  }\n\n  input UpdateCustomerInput {\n    email: String\n    name: String\n  }\n\n  input UpdateRestaurantInput {\n    name: String\n    description: String\n    opening_time: String\n    closing_time: String\n    is_24_hours: String\n    phone_number: String\n    total_tables: String\n    picture: String\n    slug: String\n  }\n\n  type File {\n    id: ID!\n    path: String!\n    filename: String!\n    mimetype: String!\n    encoding: String!\n  }\n\n  type Query {\n    "get all restaurants"\n    allRestaurants: [Restaurant!]!\n\n    "get restaurant by id or using restaurant admin token"\n    restaurant(id: ID): Restaurant\n\n    "get restaurant admin by id or using restaurant admin token"\n    restaurantAdmin(id: ID): RestaurantAdmin\n\n    "get all restaurant menu from a restaurant"\n    allRestaurantMenus(restaurant_id: ID): [RestaurantMenu!]!\n\n    "get single restaurant menu from a restaurant"\n    restaurantMenu(id: ID!): RestaurantMenu\n\n    "get all orders"\n    allOrders: [Order!]!\n\n    "get detailed order"\n    order(id: ID!): Order\n\n    "get customer by id or using customer token"\n    customer(id: ID): Customer!\n\n    "get all categories by restaurant id"\n    allCategories(restaurant_id: ID): [Category!]!\n\n    #UPLOADS\n    uploads: [File]\n  }\n\n  "mutation"\n  type Mutation {\n    #CUSTOMER\n    "customer login and get user token"\n    customerLogin(email: String!, password: String!): String!\n\n    "customer registration and get user token"\n    customerRegister(\n      email: String!\n      password: String!\n      name: String!\n    ): String!\n\n    "update customer profile"\n    updateCustomer(input: UpdateCustomerInput!): String!\n\n    "verify email verification token"\n    verifyCustomerToken(token: String): Customer\n\n    #RESTAURANT ADMIN\n    "restaurant admin login, and get user token"\n    restaurantAdminLogin(email: String!, password: String!): String!\n\n    "update Restaurant Admin"\n    updateRestaurantAdmin(input: UpdateCustomerInput!): RestaurantAdmin\n\n    "verify email verification token"\n    verifyRestaurantAdminToken(token: String): RestaurantAdmin\n\n    #RESTAURANT\n    updateRestaurant(input: UpdateRestaurantInput!): Restaurant\n\n    #"verify email verification token"\n    #verifyRestaurant(token: String!): Restaurant\n\n    #TRANSACTION\n    "create a new order"\n    createOrder(restaurant_id: ID!): Order\n    \n    "mark order as paid (for restaurant admin)"\n    markOrderAsPaid(token: ID!): Order\n\n    "add order item to order (for restaurant admin)"\n    addOrderItemsToOrder(token: String!, order_items: [OrderItemInput!]!): Order\n\n    "remove order item to order (for restaurant admin)"\n    removeOrderItemsFromOrder(token: String!, order_item_ids: [ID!]!): Order\n\n    "update order item to order (for restaurant admin)"\n    replaceOrderItemsInOrder(token: String!, order_items: [OrderItemInput!]!): Order\n\n    "pay order using T-Pay"\n    payOrder(order_id: ID!): Order\n\n    #UPLOADS\n    singleUpload(file: Upload!): File!\n    multipleUpload(files: [Upload!]!): [File!]!\n  }\n'], ['\n  scalar Upload\n\n  type RestaurantMenu {\n    id: ID!\n    name: String!\n    description: String\n    price: Int!\n    image: String!\n    categories: [Category!]!\n  }\n\n  type Restaurant {\n    id: ID!\n    name: String!\n    description: String!\n    opening_time: String!\n    closing_time: String!\n    is_24_hours: String!\n    phone_number: String!\n    total_tables: String!\n    menus: [RestaurantMenu!]!\n    picture: String\n    slug: String!\n  }\n\n  type RestaurantAdmin {\n    id: ID!\n    email: String!\n    restaurant: Restaurant!\n    nin: String!\n    address: String!\n    phone_number: String!\n  }\n\n  type Customer {\n    id: ID!\n    email: String!\n    name: String!\n    profile_picture: String\n  }\n\n  type OrderItem {\n    id: ID!\n    restaurant_menu: RestaurantMenu!\n    quantity: Int!\n    notes: String\n  }\n\n  type Order {\n    id: ID!\n    total_price: Int!\n    table_number: Int\n    restaurant: Restaurant!\n    customer: Customer!\n    order_items: [OrderItem!]!\n    paid: Boolean!\n    order_number: String!\n  }\n\n  type Category {\n    id: Int!\n    name: String!\n  }\n\n  input OrderItemInput {\n    menu_id: ID!\n    quantity: Int!\n    note: String!\n  }\n\n  input OrderInput {\n    id: ID!\n    table_number: Int!\n  }\n\n  input UpdateCustomerInput {\n    email: String\n    name: String\n  }\n\n  input UpdateRestaurantInput {\n    name: String\n    description: String\n    opening_time: String\n    closing_time: String\n    is_24_hours: String\n    phone_number: String\n    total_tables: String\n    picture: String\n    slug: String\n  }\n\n  type File {\n    id: ID!\n    path: String!\n    filename: String!\n    mimetype: String!\n    encoding: String!\n  }\n\n  type Query {\n    "get all restaurants"\n    allRestaurants: [Restaurant!]!\n\n    "get restaurant by id or using restaurant admin token"\n    restaurant(id: ID): Restaurant\n\n    "get restaurant admin by id or using restaurant admin token"\n    restaurantAdmin(id: ID): RestaurantAdmin\n\n    "get all restaurant menu from a restaurant"\n    allRestaurantMenus(restaurant_id: ID): [RestaurantMenu!]!\n\n    "get single restaurant menu from a restaurant"\n    restaurantMenu(id: ID!): RestaurantMenu\n\n    "get all orders"\n    allOrders: [Order!]!\n\n    "get detailed order"\n    order(id: ID!): Order\n\n    "get customer by id or using customer token"\n    customer(id: ID): Customer!\n\n    "get all categories by restaurant id"\n    allCategories(restaurant_id: ID): [Category!]!\n\n    #UPLOADS\n    uploads: [File]\n  }\n\n  "mutation"\n  type Mutation {\n    #CUSTOMER\n    "customer login and get user token"\n    customerLogin(email: String!, password: String!): String!\n\n    "customer registration and get user token"\n    customerRegister(\n      email: String!\n      password: String!\n      name: String!\n    ): String!\n\n    "update customer profile"\n    updateCustomer(input: UpdateCustomerInput!): String!\n\n    "verify email verification token"\n    verifyCustomerToken(token: String): Customer\n\n    #RESTAURANT ADMIN\n    "restaurant admin login, and get user token"\n    restaurantAdminLogin(email: String!, password: String!): String!\n\n    "update Restaurant Admin"\n    updateRestaurantAdmin(input: UpdateCustomerInput!): RestaurantAdmin\n\n    "verify email verification token"\n    verifyRestaurantAdminToken(token: String): RestaurantAdmin\n\n    #RESTAURANT\n    updateRestaurant(input: UpdateRestaurantInput!): Restaurant\n\n    #"verify email verification token"\n    #verifyRestaurant(token: String!): Restaurant\n\n    #TRANSACTION\n    "create a new order"\n    createOrder(restaurant_id: ID!): Order\n    \n    "mark order as paid (for restaurant admin)"\n    markOrderAsPaid(token: ID!): Order\n\n    "add order item to order (for restaurant admin)"\n    addOrderItemsToOrder(token: String!, order_items: [OrderItemInput!]!): Order\n\n    "remove order item to order (for restaurant admin)"\n    removeOrderItemsFromOrder(token: String!, order_item_ids: [ID!]!): Order\n\n    "update order item to order (for restaurant admin)"\n    replaceOrderItemsInOrder(token: String!, order_items: [OrderItemInput!]!): Order\n\n    "pay order using T-Pay"\n    payOrder(order_id: ID!): Order\n\n    #UPLOADS\n    singleUpload(file: Upload!): File!\n    multipleUpload(files: [Upload!]!): [File!]!\n  }\n']);

var _graphqlTools = require('graphql-tools');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _resolvers = require('./resolvers');

var _resolvers2 = _interopRequireDefault(_resolvers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var typeDefs = (0, _graphqlTag2.default)(_templateObject);

exports.default = (0, _graphqlTools.makeExecutableSchema)({ typeDefs: typeDefs, resolvers: _resolvers2.default });